{"version":3,"sources":["components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","useEffect","map","L","setView","tileLayer","attribution","addTo","date","fetch","then","r","text","addressPoints","JSON","parse","element","centroid","coordinates","stats","C0","dates","e","Date","target","index","nearest","basicStats","mean","points","p","filter","heatLayer","calculateStats","id","style","height","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAoDeA,EA/CH,WA4CR,OAZAC,qBAAU,WACR,IAAIC,EAAMC,IAAED,IAAI,OAAOE,QAAQ,CAAC,SAAU,UAAW,IAErDD,IAAEE,UAAU,qDAAsD,CAChEC,YACE,4FACDC,MAAML,GArCY,SAACA,EAAKM,GACzBC,MAAM,qBACLC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAE,GACF,IACMC,EADOC,KAAKC,MAAMH,GACGV,KAAI,SAAAc,GAC3B,IACI,IAAMC,EAAWH,KAAKC,MAAMC,EAAQC,UAAUC,YACxCC,EAAQL,KAAKC,MAAMC,EAAQG,OAAOC,GAClCC,EAAQF,EAAMjB,KAAI,SAAAoB,GACpB,OAAO,IAAIC,KAAKD,EAAEd,SAEhBgB,EAAS,IAAID,KAAKf,GAClBiB,EAAQC,IAAQL,EAAOG,GAC7B,MAAO,CAACP,EAAS,GAAIA,EAAS,GAAIE,EAAMM,GAAOE,WAAWC,MAE9D,SACI,MAAO,OAGXC,EAAShB,EACTA,EAAcX,KAAI,SAAC4B,GACjB,OAAIA,EAAE,GAAW,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IACpB,QAEd,GACJD,EAASA,EAAOE,QAAO,SAAAD,GAAC,OAAIA,KAC5B3B,IAAE6B,UAAUH,GAAQtB,MAAML,MAYhC+B,CAAe/B,EAAK,gBAEnB,IAEI,qBAAKgC,GAAG,MAAMC,MAAO,CAAEC,OAAQ,YCpC3BC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cfe142a9.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\r\nimport L from 'leaflet' \r\nimport 'leaflet.heat'\r\nimport nearest from 'nearest-date'\r\n\r\nconst Map = () => {\r\n    const calculateStats = (map, date) => {\r\n        fetch('./ran_yaqui2.json')\r\n        .then(r => r.text())\r\n        .then(text => {\r\n            const data = JSON.parse(text)\r\n            const addressPoints = data.map(element => {\r\n                try{\r\n                    const centroid = JSON.parse(element.centroid).coordinates\r\n                    const stats = JSON.parse(element.stats).C0\r\n                    const dates = stats.map(e => {\r\n                        return new Date(e.date)\r\n                    })\r\n                    const target = new Date(date)\r\n                    const index = nearest(dates, target)\r\n                    return [centroid[1], centroid[0], stats[index].basicStats.mean]\r\n                }\r\n                catch {\r\n                    return []\r\n                }\r\n            })\r\n            let points = addressPoints\r\n              ? addressPoints.map((p) => {\r\n                  if (p[0]) return [p[0], p[1], p[2]];\r\n                  else return null\r\n                })\r\n              : [];\r\n            points = points.filter(p => p)\r\n            L.heatLayer(points).addTo(map);\r\n        })\r\n    } \r\n\r\n    useEffect(() => {\r\n      var map = L.map(\"map\").setView([27.2098, -109.9328], 12);\r\n  \r\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution:\r\n          '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      }).addTo(map);\r\n\r\n      calculateStats(map, '2021-03-26')\r\n\r\n    }, []);\r\n  \r\n    return <div id=\"map\" style={{ height: \"100vh\" }}></div>;\r\n  }\r\n\r\nexport default Map","import './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet/dist/leaflet'\nimport Map from './components/Map';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}